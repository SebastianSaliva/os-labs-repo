Memory Management
Key Concepts
    • Memory Management: The process of controlling and coordinating computer memory, allocating portions to various running programs to optimize overall system performance.
    • Address Binding: The mapping of logical addresses to physical addresses, which can occur at compile time, load time, or execution time.
    • Contiguous Memory Allocation: Allocating memory to processes in single, unbroken blocks. Methods include fixed and variable partitioning, leading to challenges with external fragmentation.
    • Paging: A memory management scheme that avoids external fragmentation by dividing memory into fixed-sized blocks called pages. Requires page tables and can cause internal fragmentation.
    • Swapping: Moving an entire process between main memory and secondary storage (like a hard disk) to allow more processes to be run than can fit in memory simultaneously.
    • Dynamic Loading: Loading program modules or libraries only when they are needed during execution, leading to better memory utilization.
    • Dynamic Linking: Postponing the linking of external libraries until runtime, offering flexibility and code sharing benefits.
    • Fragmentation: The division of memory into smaller, unusable chunks. External fragmentation occurs in contiguous allocation, while internal fragmentation arises in paging.

Glossary of Key Terms
    • Address space: The set of addresses a process can reference.
    • Base register: A register holding the starting address of a process in physical memory.
    • Best-fit: A memory allocation technique that allocates the smallest free block that is big enough for the request.
    • Cache: A small and fast memory that stores frequently accessed data.
    • Compaction: A technique used to reduce external fragmentation by shuffling memory contents to create a larger contiguous free space.
    • Dynamic loading: Loading program routines or libraries into memory only when they are called.
    • Dynamic linking: Delaying the linking of external routines or libraries until execution time.
    • External fragmentation: Occurs when the total free memory space is sufficient, but it is scattered in small, non-contiguous blocks, making it unusable for larger requests.
    • First-fit: A memory allocation scheme that searches for the first free block large enough to accommodate a process.
    • Frame: A fixed-size block of physical memory used in paging.
    • Internal fragmentation: Occurs when a process is allocated more memory than it requires, wasting space within the allocated block (e.g., within a page).
    • Limit register: A register containing the size of a process's address space.
    • Logical address: An address generated by the CPU; also referred to as a virtual address.
    • Memory Management Unit (MMU): Hardware that maps logical addresses to physical addresses.
    • Page: A fixed-size block of logical memory used in paging.
    • Page table: A data structure used to map logical addresses (page numbers) to physical addresses (frame numbers).
    • Physical address: The actual address used by the memory unit to access data.
    • Relocation register: A register holding the value added to every address generated by a user process.
    • Segmentation: A memory management technique that divides a program's address space into logical segments of varying sizes.
    • Swapping: Moving a process between main memory and secondary storage to free up space in main memory.
    • Translation Lookaside Buffer (TLB): A cache that stores recent address translations to speed up memory access.
    • Virtual memory: A memory management technique that gives users the illusion of a larger ­memory space than physically available.
    • Worst-fit: A memory allocation algorithm that selects the largest free block to satisfy a request.
Core Concepts:
    • Memory Hierarchy: Modern computer systems rely on a memory hierarchy, with registers being the fastest but smallest, followed by cache, main memory, and finally secondary storage like disk. This hierarchy balances speed and cost.
    • Memory Protection: Operating systems must isolate processes from each other, ensuring one process cannot access another's memory space. Base and limit registers are crucial hardware mechanisms for achieving this.
    • Address Binding: The mapping of program instructions and data to memory addresses can occur at compile time, load time, or execution time. Each approach has trade-offs in terms of flexibility and complexity.
    • Logical vs. Physical Addresses: The CPU generates logical addresses, also known as virtual addresses. These are translated to physical addresses, the addresses seen by the memory unit. This translation is critical for memory management techniques like paging.
Memory Management Techniques:
    • Contiguous Memory Allocation:Early approach where each process resides in a single, contiguous block of memory.
    • Can suffer from external fragmentation, where free memory exists but not in a single block large enough to satisfy a request.
    • Dynamic storage allocation algorithms (first-fit, best-fit, worst-fit) are used to manage free space.
    • Compaction can be used to reduce external fragmentation by shuffling memory contents.
    • Paging:Divides physical memory into fixed-size blocks called frames and logical memory into pages of the same size.
    • Avoids external fragmentation by allowing a process's physical address space to be non-contiguous.
    • Uses a page table to translate logical addresses to physical addresses.
    • Translation Look-aside Buffers (TLBs) act as a cache for page table entries, speeding up address translation.
    • Can experience internal fragmentation as the last page allocated to a process may not be fully utilized.
    • Swapping:Allows processes to be temporarily moved from main memory to secondary storage (backing store).
    • Enables running processes whose total memory requirements exceed available physical memory.
    • Can significantly increase context switch time due to the time required to swap processes in and out of memory.
Key Considerations:
    • Fragmentation: Both external (contiguous allocation) and internal (paging) fragmentation can reduce memory utilization. Techniques like compaction and careful selection of page size can mitigate these issues.
    • Performance: Memory management techniques directly impact system performance. TLBs help reduce the overhead of address translation in paging systems, while swapping can lead to significant delays during context switches.
    • Sharing and Protection: Memory management must allow for sharing of code and data between processes while ensuring appropriate protection mechanisms are in place. Page tables, with the use of valid-invalid bits and protection bits, offer granular control over memory access.
Quotes:
    • "The concept of a logical address space that is bound to a separate physical address space is central to proper memory management."
    • "Each binding maps one address space to another."
    • "External Fragmentation – total memory space exists to satisfy a request, but it is not contiguous."
    • "Paging avoids external fragmentation."
    • "The two-memory access problem can be solved by the use of a special fast-lookup hardware cache called translation look-aside buffers (TLBs)."
    • "A process can be swapped temporarily out of memory to a backing store, and then brought back into memory for continued execution."
